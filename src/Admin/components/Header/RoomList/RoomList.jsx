import React, { useCallback, useEffect, useState } from "react";
import "./index.css";
import {
  addroomService,
  deleteRoomService,
  getAdminService,
  updateRoomService,
  uploadRoomImageService,
} from "../../../api/adminService";
import { ToastContainer, toast } from "react-toastify";
import { Link } from "react-router-dom";

// Component AlertMessage (ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o)
const AlertMessage = ({ message, type = "error" }) => {
  if (!message) return null;
  const alertStyle = {
    padding: "10px",
    margin: "10px 0",
    border: `1px solid ${type === "error" ? "red" : "green"}`,
    color: type === "error" ? "red" : "green",
    backgroundColor: type === "error" ? "#ffebee" : "#e8f5e9",
    borderRadius: "4px",
    textAlign: "center",
  };
  return <div style={alertStyle}>{message}</div>;
};

// State ban ƒë·∫ßu cho form
const initialFormState = {
  tenPhong: "",
  khach: 1,
  phongNgu: 0,
  giuong: 0,
  phongTam: 0,
  moTa: "",
  giaTien: 0,
  mayGiat: false,
  banLa: false,
  tivi: false,
  dieuHoa: false,
  wifi: false,
  bep: false,
  doXe: false,
  hoBoi: false,
  // banUi: false, // Ki·ªÉm tra n·∫øu tr√πng v·ªõi banLa
  maViTri: "", // N·∫øu API y√™u c·∫ßu s·ªë, kh·ªüi t·∫°o l√† 0 ho·∫∑c null
  hinhAnh: "", // Gi·ªØ l·∫°i ƒë·ªÉ hi·ªÉn th·ªã URL ·∫£nh hi·ªán t·∫°i khi edit
};

export default function RoomList() {
  const [rooms, setRooms] = useState([]);
  const [searchRoom, setSearchRoom] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [showForm, setShowForm] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [editingRoomId, setEditingRoomId] = useState(null);
  const [form, setForm] = useState(initialFormState);
  const [selectedFile, setSelectedFile] = useState(null); // State cho file h√¨nh ·∫£nh ƒë√£ ch·ªçn
  const [imagePreview, setImagePreview] = useState(null); // State cho preview h√¨nh ·∫£nh

  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [successMessage, setSuccessMessage] = useState(null);

  const itemsPerPage = 10;

  const fetchRooms = useCallback(() => {
    setLoading(true);
    setError(null);
    getAdminService()
      .then((res) => setRooms(res?.data?.content || []))
      .catch((err) => {
        console.error("L·ªói khi t·∫£i danh s√°ch ph√≤ng (component):", err);
        setError(err.message || "L·ªói khi t·∫£i danh s√°ch ph√≤ng.");
      })
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    fetchRooms();
  }, [fetchRooms]);

  const handleFileChange = (e) => {
    const file = e.target.files?.[0];

    if (!file) {
      setSelectedFile(null);
      setImagePreview(null);
      setError("Vui l√≤ng ch·ªçn ·∫£nh!");
      return;
    }

    const validTypes = ["image/jpeg", "image/png", "image/jpg"];
    if (!validTypes.includes(file.type)) {
      setSelectedFile(null);
      setImagePreview(null);
      setError(
        `File kh√¥ng h·ª£p l·ªá (${file.type}). Ch·ªâ ch·∫•p nh·∫≠n JPG, JPEG ho·∫∑c PNG`
      );
      return;
    }

    setSelectedFile(file);
    setError("");

    const reader = new FileReader();
    reader.onloadend = () => {
      setImagePreview(reader.result);
    };
    reader.readAsDataURL(file);
  };

  // const handleUploadImage = async (roomId, file) => {
  //   try {
  //     const formData = new FormData();
  //     formData.append("formFile", file);

  //     await uploadRoomImageService(roomId, formData);
  //     toast.success("T·∫£i ·∫£nh l√™n th√†nh c√¥ng!");
  //     fetchRooms();
  //   } catch (error) {
  //     toast.error("T·∫£i ·∫£nh l√™n th·∫•t b·∫°i!");
  //     console.error(error);
  //   }
  // };

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    let processedValue = value;
    if (type === "number") {
      processedValue = value === "" ? "" : parseFloat(value);
      if (isNaN(processedValue)) processedValue = 0;
    } else if (type === "checkbox") {
      processedValue = checked;
    }
    setForm({ ...form, [name]: processedValue });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setSuccessMessage(null);

    console.log("üß™ Ki·ªÉm tra ƒë·ªãnh d·∫°ng file:", selectedFile?.type);

    if (
      selectedFile &&
      !["image/jpeg", "image/png", "image/jpg"].includes(selectedFile.type)
    ) {
      setError(
        `File kh√¥ng h·ª£p l·ªá (${selectedFile.type}). Ch·ªâ ch·∫•p nh·∫≠n JPG, JPEG ho·∫∑c PNG`
      );
      setLoading(false);
      return;
    }

    try {
      const payload = {
        ...form,
        khach: parseInt(form.khach, 10),
        phongNgu: parseInt(form.phongNgu, 10),
        giuong: parseInt(form.giuong, 10),
        phongTam: parseInt(form.phongTam, 10),
        giaTien: parseInt(form.giaTien, 10),
      };
      delete payload.hinhAnh;

      let roomResult;

      if (isEditing) {
        // C·∫≠p nh·∫≠t ph√≤ng
        const updated = await updateRoomService(editingRoomId, payload);
        roomResult = updated;

        // Upload ·∫£nh n·∫øu c√≥
        if (selectedFile) {
          // const formData = new FormData();
          // formData.append("formFile", selectedFile);
          try {
            await uploadRoomImageService(editingRoomId, selectedFile);
            toast.success("C·∫≠p nh·∫≠t ·∫£nh th√†nh c√¥ng");
          } catch (uploadErr) {
            console.error("L·ªói upload ·∫£nh:", uploadErr);
            toast.warning(
              "C·∫≠p nh·∫≠t ph√≤ng th√†nh c√¥ng nh∆∞ng upload ·∫£nh th·∫•t b·∫°i"
            );
          }
        }

        toast.success("C·∫≠p nh·∫≠t ph√≤ng th√†nh c√¥ng!");
      } else {
        // Th√™m ph√≤ng
        const created = await addroomService(payload);
        roomResult = created.content;

        // Upload ·∫£nh n·∫øu c√≥
        if (selectedFile) {
          // const formData = new FormData();
          // formData.append("formFile", selectedFile);
          try {
            await uploadRoomImageService(roomResult.id, selectedFile);
            toast.success("Upload ·∫£nh th√†nh c√¥ng");
          } catch (uploadErr) {
            console.warn("L·ªói upload ·∫£nh:", uploadErr);
            toast.warning("Th√™m ph√≤ng th√†nh c√¥ng nh∆∞ng upload ·∫£nh th·∫•t b·∫°i");
          }
        }

        toast.success("Th√™m ph√≤ng th√†nh c√¥ng!");
      }

      await fetchRooms();
      resetFormAndFile();
    } catch (error) {
      console.error("L·ªói ch√≠nh:", error);
      toast.error(error.message || "C√≥ l·ªói x·∫£y ra.");
    } finally {
      setLoading(false);
    }
  };

  const resetFormAndFile = () => {
    setForm(initialFormState);
    setIsEditing(false);
    setEditingRoomId(null);
    setShowForm(false);
    setSelectedFile(null);
    setImagePreview(null);
    // setError(null); // Gi·ªØ l·∫°i ƒë·ªÉ ng∆∞·ªùi d√πng th·∫•y l·ªói n·∫øu c√≥
    // setSuccessMessage(null); // S·∫Ω t·ª± m·∫•t sau timeout
  };

  const handleDelete = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ph√≤ng n√†y kh√¥ng?")) {
      setLoading(true);
      try {
        await deleteRoomService(id);
        setRooms((prevRooms) => prevRooms.filter((room) => room.id !== id));
        toast.success("X√≥a ph√≤ng th√†nh c√¥ng!");
        fetchRooms();
      } catch (err) {
        console.error("L·ªói khi x√≥a ph√≤ng (component):", err);
        toast.error(err.message || "L·ªói khi x√≥a ph√≤ng.");
      } finally {
        setLoading(false);
      }
    }
  };

  const handleEdit = (room) => {
    const formFields = {
      tenPhong: room.tenPhong || "",
      khach: room.khach || 0,
      phongNgu: room.phongNgu || 0,
      giuong: room.giuong || 0,
      phongTam: room.phongTam || 0,
      moTa: room.moTa || "",
      giaTien: room.giaTien || 0,
      mayGiat: room.mayGiat || false,
      banLa: room.banLa || false,
      tivi: room.tivi || false,
      dieuHoa: room.dieuHoa || false,
      wifi: room.wifi || false,
      bep: room.bep || false,
      doXe: room.doXe || false,
      hoBoi: room.hoBoi || false,
      maViTri: room.maViTri || "",
      hinhAnh: room.hinhAnh || "", // ƒê·ªÉ hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i
    };
    setForm(formFields);
    setIsEditing(true);
    setEditingRoomId(room.id);
    setShowForm(true);
    setSelectedFile(null); // Reset file ƒë√£ ch·ªçn khi m·ªü form edit
    setImagePreview(room.hinhAnh || null); // Hi·ªÉn th·ªã ·∫£nh hi·ªán t·∫°i c·ªßa ph√≤ng l√†m preview
    setError(null);
    setSuccessMessage(null);
  };

  // filteredRoom, totalPages, startIndex, currentRooms, changePage (gi·ªØ nguy√™n)
  const filteredRoom = rooms.filter((room) =>
    room?.tenPhong?.toLowerCase().includes(searchRoom.toLowerCase())
  );
  const totalPages = Math.ceil(filteredRoom.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const currentRooms = filteredRoom.slice(
    startIndex,
    startIndex + itemsPerPage
  );
  const changePage = (newPage) => {
    if (newPage >= 1 && newPage <= totalPages) {
      setCurrentPage(newPage);
    }
  };

  useEffect(() => {
    if (error || successMessage) {
      const timer = setTimeout(() => {
        setError(null);
        setSuccessMessage(null);
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [error, successMessage]);

  return (
    <div className="roomlist-body">
      <div className="roomlist-main">
        <div className="roomlist-header">
          <h1 className="roomlist-h1">Qu·∫£n l√Ω Ph√≤ng</h1>
          <div className="roomlist-logout">
            <Link to="/">
              <span>
                <i className="roomlist-home fa fa-home"></i>
              </span>
            </Link>
          </div>
        </div>

        <AlertMessage message={error} type="error" />
        <AlertMessage message={successMessage} type="success" />

        <div className="roomlist-controls">
          <button
            className="roomlist-btn-add"
            onClick={() => {
              setShowForm(!showForm);
              if (showForm || isEditing) resetFormAndFile();
            }}
          >
            {showForm ? "ƒê√≥ng Form" : "Th√™m ph√≤ng"}
          </button>
          <input
            type="text"
            placeholder="T√¨m ki·∫øm ph√≤ng theo t√™n..."
            className="roomlist-search-box"
            value={searchRoom}
            onChange={(e) => {
              setSearchRoom(e.target.value);
              setCurrentPage(1);
            }}
          />
        </div>

        {showForm && (
          <form onSubmit={handleSubmit} className="roomlist-form">
            <div className="roomlist-form-group">
              <label htmlFor="tenPhong" className="roomlist-label">
                T√™n ph√≤ng:
              </label>
              <input
                id="tenPhong"
                className="roomlist-input"
                name="tenPhong"
                value={form.tenPhong}
                onChange={handleChange}
                placeholder="Nh·∫≠p t√™n ph√≤ng"
                required
              />
            </div>
            <div className="roomlist-form-group">
              <label htmlFor="khach" className="roomlist-label">
                S·ªë kh√°ch t·ªëi ƒëa:
              </label>
              <input
                id="khach"
                className="roomlist-input"
                name="khach"
                type="number"
                value={form.khach}
                onChange={handleChange}
                placeholder="S·ªë kh√°ch"
                required
                min="0"
              />
            </div>

            <div className="roomlist-form-group">
              <label htmlFor="phongNgu" className="roomlist-label">
                S·ªë ph√≤ng ng·ªß:
              </label>
              <input
                id="phongNgu"
                className="roomlist-input"
                name="phongNgu"
                type="number"
                value={form.phongNgu}
                onChange={handleChange}
                placeholder="S·ªë ph√≤ng ng·ªß"
                min="0"
              />
            </div>
            <div className="roomlist-form-group">
              <label htmlFor="giuong" className="roomlist-label">
                S·ªë gi∆∞·ªùng:
              </label>
              <input
                id="giuong"
                className="roomlist-input"
                name="giuong"
                type="number"
                value={form.giuong}
                onChange={handleChange}
                placeholder="S·ªë gi∆∞·ªùng"
                min="0"
              />
            </div>

            <div className="roomlist-form-group">
              <label htmlFor="phongTam" className="roomlist-label">
                S·ªë ph√≤ng t·∫Øm:
              </label>
              <input
                id="phongTam"
                className="roomlist-input"
                name="phongTam"
                type="number"
                value={form.phongTam}
                onChange={handleChange}
                placeholder="S·ªë ph√≤ng t·∫Øm"
                min="0"
              />
            </div>
            <div className="roomlist-form-group">
              <label htmlFor="giaTien" className="roomlist-label">
                Gi√° ti·ªÅn / ƒë√™m:
              </label>
              <input
                id="giaTien"
                className="roomlist-input"
                name="giaTien"
                type="number"
                value={form.giaTien}
                onChange={handleChange}
                placeholder="Gi√° ti·ªÅn"
                required
                min="0"
                step="any"
              />
            </div>

            <div className="roomlist-form-group full-width">
              <label htmlFor="moTa" className="roomlist-label">
                M√¥ t·∫£ ph√≤ng:
              </label>
              <textarea
                id="moTa"
                className="roomlist-input"
                name="moTa"
                value={form.moTa}
                onChange={handleChange}
                placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ ph√≤ng"
              />
            </div>

            <div className="roomlist-form-group">
              <label htmlFor="maViTri" className="roomlist-label">
                M√£ v·ªã tr√≠:
              </label>
              <input
                id="maViTri"
                className="roomlist-input"
                name="maViTri"
                value={form.maViTri}
                onChange={handleChange}
                placeholder="Nh·∫≠p m√£ v·ªã tr√≠ (s·ªë)"
                required
              />
            </div>
            <div className="roomlist-form-group">
              <label htmlFor="hinhAnhFile" className="roomlist-label">
                H√¨nh ·∫£nh ph√≤ng:
              </label>
              <input
                type="file"
                id="hinhAnhFile"
                // value={form.hinhAnh}
                className="roomlist-input-file"
                accept="image/png, image/jpeg, image/jpg"
                onChange={handleFileChange}
              />
              {imagePreview && (
                <div className="image-preview-container">
                  <img src={imagePreview} alt="Xem tr∆∞·ªõc" />
                </div>
              )}
              {selectedFile && (
                <p className="selected-file-name">
                  ƒê√£ ch·ªçn: {selectedFile.name}
                </p>
              )}
            </div>

            <div className="roomlist-form-group full-width amenities-group">
              <label className="roomlist-label">Ti·ªán √≠ch:</label>
              <div className="checkbox-container">
                {[
                  { name: "mayGiat", label: "M√°y gi·∫∑t" },
                  { name: "banLa", label: "B√†n l√†" },
                  { name: "tivi", label: "TiVi" },
                  { name: "dieuHoa", label: "ƒêi·ªÅu h√≤a" },
                  { name: "wifi", label: "Wifi" },
                  { name: "bep", label: "B·∫øp" },
                  { name: "doXe", label: "ƒê·ªó xe" },
                  { name: "hoBoi", label: "H·ªì b∆°i" },
                  /*, {name: "banUi", label: "B√†n ·ª¶i"} */
                ].map((item) => (
                  <label key={item.name} className="roomlist-checkbox-label">
                    <input
                      type="checkbox"
                      name={item.name}
                      checked={form[item.name]}
                      onChange={handleChange}
                    />{" "}
                    {item.label}
                  </label>
                ))}
              </div>
            </div>

            <div className="roomlist-form-actions full-width">
              <button className="roomlist-btn" type="submit" disabled={loading}>
                {loading
                  ? "ƒêang x·ª≠ l√Ω..."
                  : isEditing
                  ? "C·∫≠p nh·∫≠t"
                  : "Th√™m m·ªõi"}
              </button>
              <button
                type="button"
                className="roomlist-btn-cancel"
                onClick={resetFormAndFile}
                disabled={loading}
              >
                H·ªßy
              </button>
            </div>
          </form>
        )}

        {loading && !showForm && <p>ƒêang t·∫£i d·ªØ li·ªáu ph√≤ng...</p>}
        {!loading && !filteredRoom.length && !showForm && (
          <p>Kh√¥ng t√¨m th·∫•y ph√≤ng n√†o ph√π h·ª£p.</p>
        )}

        {currentRooms.length > 0 && (
          <table className="roomlist-room-table">
            <thead>
              <tr>
                <th className="roomlist-th">M√£</th>
                <th className="roomlist-th">T√™n ph√≤ng</th>
                <th className="roomlist-th">H√¨nh ·∫£nh</th>
                <th className="roomlist-th">Gi√° ti·ªÅn</th>
                <th className="roomlist-th">Kh√°ch</th>
                <th className="roomlist-th">M√£ V·ªã Tr√≠</th>
                <th className="roomlist-th">H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {currentRooms.map((room) => (
                <tr key={room.id}>
                  <td className="roomlist-td">{room.id}</td>
                  <td className="roomlist-td">{room.tenPhong}</td>
                  <td className="roomlist-td">
                    {room.hinhAnh ? (
                      <img
                        src={room.hinhAnh}
                        alt={room.tenPhong || "H√¨nh ·∫£nh ph√≤ng"}
                        width="80"
                        onError={(e) => {
                          e.target.style.display = "none";
                        }}
                      />
                    ) : (
                      "N/A"
                    )}
                  </td>
                  <td className="roomlist-td">
                    {room.giaTien?.toLocaleString()} $
                  </td>
                  <td className="roomlist-td">{room.khach}</td>
                  <td className="roomlist-td">{room.maViTri}</td>
                  <td className="roomlist-td">
                    <button
                      className="roomlist-btn-edit"
                      onClick={() => handleEdit(room)}
                      title="S·ª≠a"
                    >
                      <i className="roomlist-i fas fa-edit" />
                    </button>
                    <button
                      className="roomlist-btn-delete"
                      onClick={() => handleDelete(room.id)}
                      title="X√≥a"
                    >
                      <i className="roomlist-i fas fa-trash" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}

        {totalPages > 1 && (
          <div className="roomlist-pagination">
            <button
              onClick={() => changePage(currentPage - 1)}
              className="roomlist-button"
            >
              ¬´
            </button>
            {Array.from({ length: totalPages }, (_, i) => (
              <button
                key={i}
                onClick={() => changePage(i + 1)}
                className={`roomlist-button ${
                  currentPage === i + 1 ? "active" : ""
                }`}
              >
                {i + 1}
              </button>
            ))}
            <button
              onClick={() => changePage(currentPage + 1)}
              className="roomlist-button"
            >
              ¬ª
            </button>
          </div>
        )}
      </div>
      <ToastContainer position="top-right" autoClose={2000} />
    </div>
  );
}
